/* eslint-disable no-var */
// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var ImportData = exports.ImportData = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Pair = exports.Pair = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ProductAuthorization = exports.ProductAuthorization = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var AddProvider = exports.AddProvider = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ApplyForProduct = exports.ApplyForProduct = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var IdentityStub = exports.IdentityStub = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Profile = exports.Profile = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var OrgProfile = exports.OrgProfile = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineImportData()
definePair()
defineProductAuthorization()
defineAddProvider()
defineApplyForProduct()
defineIdentityStub()
defineProfile()
defineOrgProfile()

function defineImportData () {
  ImportData.encodingLength = encodingLength
  ImportData.encode = encode
  ImportData.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.provider)) throw new Error("provider is required")
    var len = encodings.bytes.encodingLength(obj.provider)
    length += 1 + len
    if (!defined(obj.dataHash)) throw new Error("dataHash is required")
    var len = encodings.bytes.encodingLength(obj.dataHash)
    length += 1 + len
    if (defined(obj.host)) {
      var len = encodings.string.encodingLength(obj.host)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.provider)) throw new Error("provider is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.provider, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.dataHash)) throw new Error("dataHash is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.dataHash, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (defined(obj.host)) {
      buf[offset++] = 26
      encodings.string.encode(obj.host, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      provider: null,
      dataHash: null,
      host: ""
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.provider = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.dataHash = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        case 3:
        obj.host = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definePair () {
  Pair.encodingLength = encodingLength
  Pair.encode = encode
  Pair.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.string.encodingLength(obj.key)
    length += 1 + len
    if (!defined(obj.url)) throw new Error("url is required")
    var len = encodings.string.encodingLength(obj.url)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    encodings.string.encode(obj.key, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.url)) throw new Error("url is required")
    buf[offset++] = 18
    encodings.string.encode(obj.url, buf, offset)
    offset += encodings.string.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: "",
      url: ""
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.url = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineProductAuthorization () {
  ProductAuthorization.encodingLength = encodingLength
  ProductAuthorization.encode = encode
  ProductAuthorization.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.contextId)) throw new Error("contextId is required")
    var len = encodings.string.encodingLength(obj.contextId)
    length += 1 + len
    if (!defined(obj.product)) throw new Error("product is required")
    var len = encodings.string.encodingLength(obj.product)
    length += 1 + len
    if (!defined(obj.firstName)) throw new Error("firstName is required")
    var len = encodings.string.encodingLength(obj.firstName)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.contextId)) throw new Error("contextId is required")
    buf[offset++] = 10
    encodings.string.encode(obj.contextId, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.product)) throw new Error("product is required")
    buf[offset++] = 18
    encodings.string.encode(obj.product, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.firstName)) throw new Error("firstName is required")
    buf[offset++] = 26
    encodings.string.encode(obj.firstName, buf, offset)
    offset += encodings.string.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      contextId: "",
      product: "",
      firstName: ""
    }
    var found0 = false
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.contextId = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.product = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        case 3:
        obj.firstName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found2 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAddProvider () {
  AddProvider.encodingLength = encodingLength
  AddProvider.encode = encode
  AddProvider.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.host)) throw new Error("host is required")
    var len = encodings.string.encodingLength(obj.host)
    length += 1 + len
    if (!defined(obj.provider)) throw new Error("provider is required")
    var len = encodings.bytes.encodingLength(obj.provider)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.host)) throw new Error("host is required")
    buf[offset++] = 10
    encodings.string.encode(obj.host, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.provider)) throw new Error("provider is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.provider, buf, offset)
    offset += encodings.bytes.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      host: "",
      provider: null
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.host = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.provider = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineApplyForProduct () {
  ApplyForProduct.encodingLength = encodingLength
  ApplyForProduct.encode = encode
  ApplyForProduct.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.host)) throw new Error("host is required")
    var len = encodings.string.encodingLength(obj.host)
    length += 1 + len
    if (!defined(obj.provider)) throw new Error("provider is required")
    var len = encodings.bytes.encodingLength(obj.provider)
    length += 1 + len
    if (!defined(obj.product)) throw new Error("product is required")
    var len = encodings.string.encodingLength(obj.product)
    length += 1 + len
    if (defined(obj.contextId)) {
      var len = encodings.bytes.encodingLength(obj.contextId)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.host)) throw new Error("host is required")
    buf[offset++] = 10
    encodings.string.encode(obj.host, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.provider)) throw new Error("provider is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.provider, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.product)) throw new Error("product is required")
    buf[offset++] = 26
    encodings.string.encode(obj.product, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.contextId)) {
      buf[offset++] = 34
      encodings.bytes.encode(obj.contextId, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      host: "",
      provider: null,
      product: "",
      contextId: null
    }
    var found0 = false
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.host = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.provider = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        case 3:
        obj.product = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found2 = true
        break
        case 4:
        obj.contextId = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineIdentityStub () {
  IdentityStub.encodingLength = encodingLength
  IdentityStub.encode = encode
  IdentityStub.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.permalink)) throw new Error("permalink is required")
    var len = encodings.bytes.encodingLength(obj.permalink)
    length += 1 + len
    if (!defined(obj.link)) throw new Error("link is required")
    var len = encodings.bytes.encodingLength(obj.link)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.permalink)) throw new Error("permalink is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.permalink, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.link)) throw new Error("link is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.link, buf, offset)
    offset += encodings.bytes.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      permalink: null,
      link: null
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.permalink = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.link = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineProfile () {
  Profile.encodingLength = encodingLength
  Profile.encode = encode
  Profile.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.permalink)) throw new Error("permalink is required")
    var len = encodings.bytes.encodingLength(obj.permalink)
    length += 1 + len
    if (!defined(obj.link)) throw new Error("link is required")
    var len = encodings.bytes.encodingLength(obj.link)
    length += 1 + len
    if (!defined(obj.firstName)) throw new Error("firstName is required")
    var len = encodings.string.encodingLength(obj.firstName)
    length += 1 + len
    if (defined(obj.lastName)) {
      var len = encodings.string.encodingLength(obj.lastName)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.permalink)) throw new Error("permalink is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.permalink, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.link)) throw new Error("link is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.link, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.firstName)) throw new Error("firstName is required")
    buf[offset++] = 26
    encodings.string.encode(obj.firstName, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.lastName)) {
      buf[offset++] = 34
      encodings.string.encode(obj.lastName, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      permalink: null,
      link: null,
      firstName: "",
      lastName: ""
    }
    var found0 = false
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.permalink = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.link = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        case 3:
        obj.firstName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found2 = true
        break
        case 4:
        obj.lastName = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineOrgProfile () {
  OrgProfile.encodingLength = encodingLength
  OrgProfile.encode = encode
  OrgProfile.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.permalink)) throw new Error("permalink is required")
    var len = encodings.bytes.encodingLength(obj.permalink)
    length += 1 + len
    if (!defined(obj.link)) throw new Error("link is required")
    var len = encodings.bytes.encodingLength(obj.link)
    length += 1 + len
    if (!defined(obj.orgPermalink)) throw new Error("orgPermalink is required")
    var len = encodings.bytes.encodingLength(obj.orgPermalink)
    length += 1 + len
    if (!defined(obj.orgLink)) throw new Error("orgLink is required")
    var len = encodings.bytes.encodingLength(obj.orgLink)
    length += 1 + len
    if (!defined(obj.name)) throw new Error("name is required")
    var len = encodings.string.encodingLength(obj.name)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.permalink)) throw new Error("permalink is required")
    buf[offset++] = 10
    encodings.bytes.encode(obj.permalink, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.link)) throw new Error("link is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.link, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.orgPermalink)) throw new Error("orgPermalink is required")
    buf[offset++] = 26
    encodings.bytes.encode(obj.orgPermalink, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.orgLink)) throw new Error("orgLink is required")
    buf[offset++] = 34
    encodings.bytes.encode(obj.orgLink, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.name)) throw new Error("name is required")
    buf[offset++] = 42
    encodings.string.encode(obj.name, buf, offset)
    offset += encodings.string.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      permalink: null,
      link: null,
      orgPermalink: null,
      orgLink: null,
      name: ""
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found3 = false
    var found4 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found3 || !found4) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.permalink = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 2:
        obj.link = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        case 3:
        obj.orgPermalink = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found2 = true
        break
        case 4:
        obj.orgLink = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found3 = true
        break
        case 5:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found4 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
